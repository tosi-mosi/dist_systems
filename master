#!/usr/local/bin/python3
import asyncio
import grpc
import rpc_pb2
import rpc_pb2_grpc
from aiohttp import web
import logging
import sys
import json
from common import retry, get_eth0_ipv4

tr_id = 0
log = {}

secondaries_dns_names = [
    f'dist_systems.s.{i+1}' for i in range(0, int(sys.argv[1]))
]
MAX_WRITE_CONCERN = 1 + len(secondaries_dns_names)

# GRPC server
class Replicator(rpc_pb2_grpc.ReplicatorServicer):
    async def rejoin(
            self, request: rpc_pb2.RejoinRequest,
            context: grpc.aio.ServicerContext) -> rpc_pb2.RejoinResponse:
        logging.info('Processing rejoining gRPC request')
        result = rpc_pb2.RejoinResponse()
        for k, v in log.items():
            result.requests.append(rpc_pb2.Request(tr_id=k, msg=v))
        return result

async def rpc_serve():
    server = grpc.aio.server()
    rpc_pb2_grpc.add_ReplicatorServicer_to_server(Replicator(), server)
    listen_addr = f'{get_eth0_ipv4()}:50051'
    server.add_insecure_port(listen_addr)
    logging.info('Starting server on %s', listen_addr)
    await server.start()
    await server.wait_for_termination()

# GRPC client
CHANNEL_OPTIONS = [
    ('grpc.enable_retries', 0),
]

async def replicate_msg(sec_ip, tr_id, msg):
    async with grpc.aio.insecure_channel(target=f'{sec_ip}:{50051}',
                                         options=CHANNEL_OPTIONS) as channel:
        stub = rpc_pb2_grpc.ReplicatorStub(channel)
        logging.info(f'{tr_id}: Waiting for gRPC response from {sec_ip}')
        # can add timeout=seconds here
        response = await stub.replicateMsg(rpc_pb2.Request(tr_id=tr_id, msg=msg))
    logging.info(f"{tr_id}: {'ACK' if response.success else 'Fail'} on {sec_ip}")
    return (sec_ip, response.success)

# HTTP server
async def handle_list(request):
    return web.Response(text='\n'.join([log[k] for k in sorted(log.keys())]) + '\n')

async def wait_first_n(tasks, n):
    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)
    results = []
    for task in done:
        results.append(task.result())
    if (n > len(done)):
        results += await wait_first_n(pending, n - len(done))
    return results

def replicate_without_waiting(tr_id, msg):
    for s in secondaries_dns_names:
        asyncio.get_event_loop().create_task(retry(replicate_msg, s, tr_id, msg))

async def handle_append(request):
    logging.info('Processing http request from %r', request.remote)
    body = await request.json()
    
    msg = body.get('msg')
    if msg is None:
        logging.error('Wrong POST body %s\n', body)
        return web.Response(text=f'Failed to parse POST request: Wrong POST body. Request should have "msg" and optionally "w"(write concern) keys\n', status=400)
    
    write_concern = int(body.get('w', MAX_WRITE_CONCERN))
    if write_concern < 1 or write_concern > MAX_WRITE_CONCERN:
        logging.error('Wrong write_concern parameter %s\n', body)
        return web.Response(text=f'Failed to parse POST request: Wrong write_concern parameter. write_concern shouldn\'t be greater than {MAX_WRITE_CONCERN}\n', status=400)

    global tr_id
    tr_id += 1
    tr_id_local = tr_id

    num_of_acks_to_wait_for = write_concern - 1
    logging.info(f'{tr_id_local}: Waiting for ACKs from {num_of_acks_to_wait_for} secondary/-ies')
    if num_of_acks_to_wait_for == 0:
        replicate_without_waiting(tr_id_local, msg)
        log[tr_id_local] = msg
        logging.info(f'{tr_id_local}: Appended {(tr_id_local, msg)} to in-memory list\n')
        return web.Response(text=f'{tr_id_local}: Appended {(tr_id_local, msg)} to in-memory list\n')

    replication_tasks = [asyncio.create_task(retry(replicate_msg, s, tr_id_local, msg)) for s in secondaries_dns_names]
    acks_info = await wait_first_n(replication_tasks, num_of_acks_to_wait_for)

    logging.info(f'{tr_id_local}: ACKs: {acks_info}')
    if all([ack[1] for ack in acks_info]):
        log[tr_id_local] = msg
        logging.info(f'{tr_id_local}: Appended {(tr_id_local, msg)} to in-memory list\n')
        return web.Response(text=f'{tr_id_local}: Appended {(tr_id_local, msg)} to in-memory list\n')
    else:
        # here some secondaries could have added msg, but some didn't. And master didn't.
        logging.error(f'{tr_id_local}: Failed to append {(tr_id_local, msg)}: Got not enough ACKs from secondaries\n')
        return web.Response(text=f'{tr_id_local}: Failed to append "{(tr_id_local, msg)}": Got not enough ACKs from secondaries\n', status=500)

if (len(sys.argv) < 2):
    print('Usage: master <number_of_secondaries>')
    exit(1)

async def main():
    app = web.Application()
    app.add_routes([web.get('/list', handle_list),
                    web.post('/append', handle_append)])
    logging.basicConfig(
        level=logging.DEBUG,
        format='[%(asctime)s.%(msecs)03d] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
        datefmt='%H:%M:%S',
        stream=sys.stdout)
    await asyncio.gather(rpc_serve(), web._run_app(app, access_log=None))

asyncio.run(main())