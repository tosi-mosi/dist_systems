#!/usr/local/bin/python3
import asyncio
import grpc
import rpc_pb2
import rpc_pb2_grpc
from aiohttp import web
import logging
import sys
import time
from common import retry, get_eth0_ipv4

log = {}
out_of_order_requests = {}
count = 0

async def delay(secs):
    logging.info('Async sleeping for %s sec...', secs)
    await asyncio.sleep(secs)

def process_unordered_requests(tr_id):
    tmp = tr_id+1
    while tmp in out_of_order_requests:
        logging.info(f'Adding previously unordered message {(tmp, out_of_order_requests[tmp])} to log')
        # also removes tmp from dict
        log[tmp] = out_of_order_requests.pop(tmp)
        tmp += 1

# GRPC server
class Replicator(rpc_pb2_grpc.ReplicatorServicer):
    async def replicateMsg(
            self, request: rpc_pb2.Request,
            context: grpc.aio.ServicerContext) -> rpc_pb2.Response:
        logging.info('Processing replicateMsg gRPC request')
        
        def normal_handling():
            if (request.tr_id in log):
                logging.error(f'Duplication detected: value with tr_id {request.tr_id} already present. Not adding {(request.tr_id, request.msg)} to log')
                return rpc_pb2.Response(success=True)
            if (request.tr_id != 1 and request.tr_id-1 not in log):
                logging.info(f'Got an out of order request {(request.tr_id, request.msg)}. Saving it for later processing')
                out_of_order_requests[request.tr_id] = request.msg
                return rpc_pb2.Response(success=True)
            log[request.tr_id] = request.msg
            process_unordered_requests(request.tr_id)
            logging.info('%s was appended to replica-log\n', (request.tr_id, request.msg))
            return rpc_pb2.Response(success=True)

        # (1, msg1) comes, isn't added anywhere, triggers 'number_of_failed_tries' sequential internal server errors because of exception
        # (2, msg2) comes, is added
        # on 'number_of_failed_tries'+1 try (1, msg1) is finally added by normal_handling, which resolves out-of-order problem
        def simulate_for_out_of_order():
            global count
            count += 1
            raise Exception('Simulating internal server error')

        # (1, msg1) comes, is added to log, triggers 'number_of_failed_tries' sequential internal server errors because of exception
        # on 'number_of_failed_tries'+1 try normal_handling is called, it sees that (1, msg) is in log already, resolves deduplication
        def simulate_for_duplication():
            global count
            count += 1
            log[request.tr_id] = request.msg
            process_unordered_requests(request.tr_id)
            raise Exception('Simulating internal server error')

        async def simulate_delay():
            global count
            count += 1
            await delay(int(sys.argv[2]))
            return normal_handling()

        if (len(sys.argv) == 4 and sys.argv[1] == 'dont_add_and_abort' and request.msg == sys.argv[2] and count < int(sys.argv[3])):
            simulate_for_out_of_order()
        elif (len(sys.argv) == 4 and sys.argv[1] == 'add_and_abort' and request.msg == sys.argv[2] and count < int(sys.argv[3])):
            simulate_for_duplication()
        elif (len(sys.argv) == 5 and sys.argv[1] == 'delay' and request.msg == sys.argv[3] and count < int(sys.argv[4])):
            return await simulate_delay()
        elif (len(sys.argv) == 3 and sys.argv[1] == 'delay'):
            return await simulate_delay()
        else:
            return normal_handling()

async def rpc_serve():
    server = grpc.aio.server()
    rpc_pb2_grpc.add_ReplicatorServicer_to_server(Replicator(), server)
    listen_addr = f'{get_eth0_ipv4()}:50051'
    server.add_insecure_port(listen_addr)
    logging.info('Starting server on %s', listen_addr)
    await server.start()
    await server.wait_for_termination()

#GRPC client
CHANNEL_OPTIONS = [
    ('grpc.enable_retries', 0),
]

async def rejoin():
    async with grpc.aio.insecure_channel(target=f'dist_systems.m:{50051}',
                                         options=CHANNEL_OPTIONS) as channel:
        stub = rpc_pb2_grpc.ReplicatorStub(channel)
        logging.info(f'Waiting for gRPC response from master')
        response = await stub.rejoin(rpc_pb2.RejoinRequest())
        logging.info(f'Rejoining with master: {len(response.requests)} items received')
        for item in response.requests:
            logging.info(f'Adding {(item.tr_id, item.msg)} after rejoining')
            log[item.tr_id] = item.msg

# HTTP server
async def handle_list(request):
    return web.Response(text='\n'.join([log[k] for k in sorted(log.keys())]) + '\n')

# Main
async def main():
    app = web.Application()
    app.add_routes([web.get('/list', handle_list)])
    logging.basicConfig(
        level=logging.DEBUG,
        format='[%(asctime)s.%(msecs)03d] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
        datefmt='%H:%M:%S',
        stream=sys.stdout)
    await asyncio.gather(rpc_serve(), web._run_app(app, access_log=None), retry(rejoin))

asyncio.run(main())